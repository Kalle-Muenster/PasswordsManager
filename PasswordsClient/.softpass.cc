/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      softpass.cc                                ||
||     Author:    autogenerated                              ||
||     Generated: by Command Generator v.0.1                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#ifndef _OnTheFly_
  #include ".softpass.h"
#else
  int USAGE(softpass)
  {
  Synopsis("<operation> [location [password]]");
  printf("Operations:\n\n\
  --get    :    Get password stored for <location>\n\
  --add    :    Add [password] for some <location>\n\
  --rem    :    Remove password stored for <location>\n\
  --lst    :    Output a list of all stored locations\n\
  --set    :    Set username|password|storage|command\n\n");
    return CheckForError()
        || !hasOption('h');
  }
#endif

#include <.crypt64.h>

// regular includes here:
#include <stdlib.h>


const char* softpass_get_wort( const char* usePwApi, const char* wortFuerOrt )
{
	if (usePwApi) {
		K64* key = crypt64_createKeyFromPass(SOFTPASS_MASTERKEY);
		char crp[CRYPT64_ENCRYPTED_SIZE(strlen(SOFTPASS_MASTERKEY)+3)+4];
		crp[crypt64_encrypt(key,pool_setf("***%s",SOFTPASS_MASTERKEY),strlen(SOFTPASS_MASTERKEY)+3,&crp[0])]='\0';
		pool_setCheckpoint();
		pool_setf( "%s \"", usePwApi );
		pool_setf( "%s/Passwords/", SOFTPASS_STORAGE_LOCATION);
		pool_setf( "%s/",SOFTPASS_USERNAME);
		pool_setf( "%s/Password?masterKey=", wortFuerOrt);
		pool_setf( "%s\"", &crp[0] );
		if ( !system( pool_collectCheckpoint() ) ) clearAllErrors();
	} else {
		pool_setf("crypt64 --d-%s",SOFTPASS_STORAGE_LOCATION);
		pool_setf("/%s.txt.yps ",wortFuerOrt);
		pool_setf("--k-%s --o-"DOUBLEDASHED_OUT,SOFTPASS_MASTERKEY);
		const char* cmdlne = pool_merge(3);
		if ( !system( cmdlne ) ) clearAllErrors();
	} return pool_set("\n");
}

const char* softpass_add_wort( int usePwApi, const char* ort, const char* wort)
{
	return pool_set("not yet implemented...\n");
}

const char* softpass_lst_alle( int usePwApi )
{
	if( usePwApi ) {
		return pool_set("not yet implemented...\n");
	} else {
		system( pool_setf("fs.c %s/*.yps",SOFTPASS_STORAGE_LOCATION) );
		return pool_set("\n");
	}
}

const char* softpass_rem_wort( int usePwApi, const char* wortFuerOrt)
{
	if( usePwApi ) {
		return pool_set("not yet implemented...\n");
	} else {
		pool_setf( "del /q \"%s/", SOFTPASS_STORAGE_LOCATION );
		pool_setf( "%s.txt.yps\"", wortFuerOrt );
		system( pool_merge(2) );
		return pool_set("\n");
	}
}

const char* softpass_set_conf( const char* was, const char* das )
{
	if ( (!was) || (!das) ) { 
		return setError( "softpass 'set' takes at least 2 parameters", FourCC("args") );
	} switch( FourCC(was) ) {
		case FOURCC('u','s','e','r'): {
			setPrefixed( "USERNAME", toQuoted(das) );
		} break;
		case FOURCC('p','a','s','s'): {
			setPrefixed( "MASTERKEY", toQuoted(das) );
		} break;
		case FOURCC('s','t','o','r'): {
			setPrefixed( "STORAGE_LOCATION", toQuoted(das) );
		} break;
		case FOURCC('c','o','m','m'):
		case FOURCC('c','u','r','l'): {
			if ( das[0] == '0' || (das[0] == 'o' && das[1] == 'f' && das[2] == 'f') ) {
				setPrefixed( "USE_PASSWORDSAPI", "(0)" );
			} else
				setPrefixed( "USE_PASSWORDSAPI", toQuoted(das) );
		} break;
		default:
			return setError( pool_setf("Unknown command: %s",was), FourCC("was") );
	} pool_setf( "Successfully set '%s' = ", was );
	pool_setf( "'%s'\n", das );
	return pool_merge(2);
}


#ifdef softpass
int main(int argc,char**argv)
{
    if( !InitCommandLiner(argc,argv) ) {
        exit(USAGE(softpass));
    }

    if (!isAnyModusAtAll())
		setModus("get");

	FeatureGet fet = getFeatured( "USE_PASSWORDSAPI" );
	char* usePwApi = (fet.type.flags & Type_STRING) 
	               ? fet.value.string : NULL;
	clearAllErrors();
	printf("\n");

	       if (isModus("get")) {
		printf( softpass_get_wort( usePwApi, rawNext('g') ) );
	} else if (isModus("add")) {
		printf( softpass_add_wort( usePwApi, rawName(1), rawName(2) ) );
	} else if (isModus("lst")) {
		printf( softpass_lst_alle( usePwApi ) );
	} else if (isModus("rem")) {
		printf( softpass_rem_wort( usePwApi, rawName(1) ) );
	} else if (isModus("set")) {
		printf( softpass_set_conf( rawName(1), rawName(2) ) );
	} printf( "\n" ); 

	exit( CheckForError() );
}

#endif
